import axios from "axios";
import { useEffect, useState } from "react";
import { socket } from "../../socket.js";
import ChatContainer from "../../mycomponents/ChatContainer";
import { useChatListStore, useUserStore } from "@/store";
import { v4 as uuid, validate as uuidValidate } from "uuid";
import NewUserModal from "@/mycomponents/NewUserModal";
import { toast, Toaster } from "sonner";
import SideBarSheetMobile from "@/mycomponents/ChatRouteComp/SideBarSheetMobile";

export type useUserStoreType = {
  nouserfound: boolean;
  setNouserfound: (nouserfound: boolean) => void;
};

export default function Chat() {
  const [isConnected, setIsConnected] = useState(false);
  const [transport, setTransport] = useState("N/A");
  const { chatListStore, setChatListStore } = useChatListStore();
  const { nouserfound, setNouserfound } = useUserStore() as useUserStoreType;

  //https://633d7113f2b0e623dc73e67b.mockapi.io/username_collection

  useEffect(() => {
    //     const mock = async () => {
    //       try {
    //         const mockapi_post = await axios.post(
    //           "https://633d7113f2b0e623dc73e67b.mockapi.io/username_collection",
    //           {
    //             userUUID: uuid(),
    //             username: "username_generated by me",
    //           },
    //         );
    //         const data = mockapi_post.data;
    //         console.log(data);
    //       } catch (error) {
    //         console.error(error, "mockapi_post error")
    //       }
    //     };
    // mock()
    const localusername = localStorage.getItem("username");
    //check if there is userid in localstorage:
    const username = localStorage.getItem("username");
    const usernameValid = uuidValidate(username);
    console.log(usernameValid);
    if (!usernameValid || nouserfound) {
      setNouserfound(true);
      toast.error("Please create a username", {
        description: "username is required.",
      });
    }
  }, []);

  useEffect(() => {
    if (!socket) return;

    if (socket.connected) {
      onConnect();
    }

    // let timer: NodeJS.Timeout; //for testing purposes para ma dc lang after 10 seconds
    function onConnect() {
      console.log(`recovered? ${socket?.recovered}`);
      console.log("Connected to backend via Socket.IO");

      // timer = setTimeout(() => {
      //   if(socket?.io.engine){
      //     socket.io.engine.close();
      //   }
      // }, 10000);

      if (socket?.recovered) {
        console.log("recovered", socket.recovered);
      } else {
        console.log("not recovered", socket?.recovered);
      }
      setIsConnected(true);

      if (socket?.io?.engine?.transport) {
        setTransport(socket.io.engine.transport.name);

        socket.io.engine.on("upgrade", (transport: any) => {
          setTransport(transport.name);
        });
      }
    }

    function onDisconnect() {
      setIsConnected(false);
      setTransport("N/A");
    }

    socket.on("connect", onConnect);
    socket.on("disconnect", onDisconnect);

    return () => {
      socket?.off("connect", onConnect);
      socket?.off("disconnect", onDisconnect);
      // clearTimeout(timer);
    };
  }, []);

  useEffect(() => {
    const settingMessage = (data: string) => {
      console.log(data, chatListStore);
      // console.log({msg: "chat-index.tsx",chatListStore, data});
      setChatListStore(data);
    };
    socket?.on("chat message", settingMessage);

    return () => {
      socket?.off("chat message", settingMessage);
    };
  }, []);

  return (
    <>
      <Toaster position="top-center" richColors expand={true} />
      {nouserfound && <NewUserModal />}
      <ChatContainer transport={transport} isConnected={isConnected} />
    </>
  );
}

//! ITONG NASA BABA PANG CHECK KUNG CONNECTED

// <div className="flex flex-col items-center justify-center gap-10">

//   <h3 className="scroll-m-20 text-2xl font-semibold tracking-tight flex flex-col justify-center items-center">
//     <span>Transport Protocol: {transport}</span>
//     <span>Status: {isConnected ? <span className="text-lime-500">Connected</span> : <span className="text-rose-500">Disconnected</span>}</span>
//   </h3>

//   <ul className="flex gap-2">
//     {rooms.map((room, index) => (
//       <li key={index}>
//         {/* <Button onClick={() => socket?.emit("join", room)}>{room}</Button> */}
//         <Button onClick={() => joinpush(room)}>{room}</Button>
//       </li>
//     ))}
//   </ul>

//   <ChatList chatlists={chatList} />

// </div>
